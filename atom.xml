<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lienguang0624.github.io/</id>
    <title>LightHunter</title>
    <updated>2021-04-23T09:12:58.988Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lienguang0624.github.io/"/>
    <link rel="self" href="https://lienguang0624.github.io/atom.xml"/>
    <subtitle>仰天大笑出门去，我辈岂是蓬蒿人！</subtitle>
    <logo>https://lienguang0624.github.io/images/avatar.png</logo>
    <icon>https://lienguang0624.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, LightHunter</rights>
    <entry>
        <title type="html"><![CDATA[量化交易——FMZ平台交易框架]]></title>
        <id>https://lienguang0624.github.io/post/liang-hua-jiao-yi-fmz-ping-tai-jiao-yi-kuang-jia/</id>
        <link href="https://lienguang0624.github.io/post/liang-hua-jiao-yi-fmz-ping-tai-jiao-yi-kuang-jia/">
        </link>
        <updated>2021-04-23T07:45:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="现货交易基本框架概览">现货交易基本框架概览</h1>
<pre><code class="language-python">def main():
    btc_sell_flag = False #btc买入标志位（测试用）
    btc_buy_flag = False #btc卖出标志位（测试用）

    #交易策略所需参数 本次案例为MACD相关定义参数
    dea_sub_dif_new = 0
    dea_sub_dif_current = 0
    dif_sub_dea_new = 0
    dif_sub_dea_current = 0
    dif_buy_current = 0
    macd_buy_flag = False
    macd_sell_flag = False

    # 交易标志位设定
    BUY_FLAG = False
    SELL_FLAG = False
    ALREADY_BUY_FLAG = False
    ALREADY_SELL_FLAG = True

    while True:
        account = exchange.GetAccount()
        Balance = account.Balance #USTD剩余
        Stocks = account.Stocks #BTC剩余
        bar = exchange.GetRecords(60) 	# 获取K线数组
        #可否满足买入综合判定
        macd_buy_flag,dif_buy_current,dea_sub_dif_current = macd_buy_flag_function(bar,dea_sub_dif_current)
        macd_sell_flag,dif_sub_dea_current = macd_sell_flag_function(bar,dif_sub_dea_current,dif_buy_current)

        if macd_buy_flag == True :
            BUY_FLAG = True
            SELL_FLAG = False
        #可否满足卖出综合判定
        if macd_sell_flag == True :
            BUY_FLAG = False
            SELL_FLAG = True
        
        if BUY_FLAG and ALREADY_BUY_FLAG == False:
            exchange.Buy(-1, (Balance-1))#USTD剩余全仓买入
            ALREADY_BUY_FLAG = True
            ALREADY_SELL_FLAG = False
            BUY_FLAG = False
            macd_buy_flag = False

        if SELL_FLAG and ALREADY_SELL_FLAG == False:
            Log(&quot;round(Stocks,6):&quot;,round(Stocks,6))
            exchange.Sell(-1, (round(Stocks,6)-0.000001))
            ALREADY_SELL_FLAG = True
            ALREADY_BUY_FLAG = False
            SELL_FLAG = False
            macd_sell_flag = False
            
        #标志位重置    
        BUY_FLAG = False
        SELL_FLAG = False
        macd_buy_flag = False
        macd_sell_flag = False
#买入数额和卖出数额有问题
        Sleep(1000)
</code></pre>
<h1 id="框架解释说明">框架解释说明</h1>
<ol>
<li>进入主函数后首先定义本次策略所需变量，并进行初始化，也就是如下这一部分，该处的变量随策略的改变而发生改变</li>
</ol>
<pre><code class="language-python">    #交易策略所需参数 本次案例为MACD相关定义参数
    dea_sub_dif_new = 0
    dea_sub_dif_current = 0
    dif_sub_dea_new = 0
    dif_sub_dea_current = 0
    dif_buy_current = 0
    macd_buy_flag = False
    macd_sell_flag = False

    # 交易标志位设定
    BUY_FLAG = False
    SELL_FLAG = False
    ALREADY_BUY_FLAG = False
    ALREADY_SELL_FLAG = True
</code></pre>
<ol start="2">
<li>而后进入while循环，首先在每一次循环的初始时刻调出当前仓位，余额，K线图</li>
</ol>
<pre><code class="language-python">    while True:
        account = exchange.GetAccount()
        Balance = account.Balance #USTD剩余
        Stocks = account.Stocks #BTC剩余
        bar = exchange.GetRecords(60) 	# 获取K线数组
</code></pre>
<ol start="3">
<li>而后根据不同策略判断当前是否符合该策略的买/卖点,并返回该策略买卖标志位（macd_buy_flag），以及下一次循环可能用到的变量（dif_buy_current,dea_sub_dif_current）</li>
</ol>
<pre><code class="language-python">        #可否满足买入综合判定
        macd_buy_flag,dif_buy_current,dea_sub_dif_current = macd_buy_flag_function(bar,dea_sub_dif_current)
        macd_sell_flag,dif_sub_dea_current = macd_sell_flag_function(bar,dif_sub_dea_current,dif_buy_current)
</code></pre>
<ol start="4">
<li>根据各类策略进行融合，综合判定是否可以进行买卖操作，并对整个系统的买卖标志位进行赋值：</li>
</ol>
<pre><code class="language-python">        if macd_buy_flag == True :
            BUY_FLAG = True
            SELL_FLAG = False

        if macd_sell_flag == True :
            BUY_FLAG = False
            SELL_FLAG = True
</code></pre>
<ol start="5">
<li>根据整个系统的买卖标志位进行决定是否进行买入卖出操作，由于交易系统有小数后位数限制，所以使用round()函数进行精度控制。需要注意的是exchange.Buy()函数接受的为USDT单位，exchange.Sell()函数接受的为BTC单位</li>
</ol>
<pre><code class="language-python">        if BUY_FLAG and ALREADY_BUY_FLAG == False:
            exchange.Buy(-1, (Balance-1))#USTD剩余全仓买入
            ALREADY_BUY_FLAG = True
            ALREADY_SELL_FLAG = False
            BUY_FLAG = False
            macd_buy_flag = False

        if SELL_FLAG and ALREADY_SELL_FLAG == False:
            Log(&quot;round(Stocks,6):&quot;,round(Stocks,6))
            exchange.Sell(-1, (round(Stocks,6)-0.000001))
            ALREADY_SELL_FLAG = True
            ALREADY_BUY_FLAG = False
            SELL_FLAG = False
            macd_sell_flag = False
</code></pre>
<ol start="6">
<li>最后在循环结束前对相关标志位进行复位</li>
</ol>
<pre><code class="language-python">        #标志位重置    
        BUY_FLAG = False
        SELL_FLAG = False
        macd_buy_flag = False
        macd_sell_flag = False
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[量化交易——MACD交易方案]]></title>
        <id>https://lienguang0624.github.io/post/liang-hua-jiao-yi-macd-jiao-yi-fang-an/</id>
        <link href="https://lienguang0624.github.io/post/liang-hua-jiao-yi-macd-jiao-yi-fang-an/">
        </link>
        <updated>2021-04-23T07:17:30.000Z</updated>
        <content type="html"><![CDATA[<p>百度百科如下定义：</p>
<blockquote>
<p>MACD称为异同移动平均线，是从双指数移动平均线发展而来的，由快的指数移动平均线（EMA12）减去慢的指数移动平均线（EMA26）得到快线DIF，再用2×（快线DIF-DIF的9日加权移动均线DEA）得到MACD柱。MACD的意义和双移动平均线基本相同，即由快、慢均线的离散、聚合表征当前的多空状态和股价可能的发展变化趋势，但阅读起来更方便。MACD的变化代表着市场趋势的变化，不同K线级别的MACD代表当前级别周期中的买卖趋势。</p>
</blockquote>
<p>简单来说，MACD指标是由两线一柱组合起来形成，快速线（白色线）为DIF，慢速线（黄色线）为DEA，柱状图为MACD。</p>
<p><strong>基本交易逻辑：</strong><br>
1.当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)并向上移动时，一般表示为行情处于多头行情中，可以买入开仓或多头持仓；<br>
2.当DIF和DEA均小于0(即在图形上表示为它们处于零线以下)并向下移动时，一般表示为行情处于空头行情中，可以卖出开仓或观望。<br>
3.当DIF和DEA均大于0(即在图形上表示为它们处于零线以上)但都向下移动时，一般表示为行情处于下跌阶段，可以卖出开仓和观望；<br>
4.当DIF和DEA均小于0时(即在图形上表示为它们处于零线以下)但向上移动时，一般表示为行情即将上涨，股票将上涨，可以买入开仓或多头持仓。</p>
<p><strong>量化交易逻辑：</strong></p>
<pre><code class="language-python">#MACD判断买点
def macd_buy_flag_function(bar,dea_sub_dif_current):
    if len(bar) &lt; 100:		# 如果K线数组长度太小，就直接返回跳过
        return
    macd = TA.MACD(bar, 12, 26, 9)  		# 计算MACD值
    dif = macd[0][-2]  					# 获取DIF的值
    dea = macd[1][-2]  					# 获取DEA的值
    
    # macd买入指标判断 DEA-DIF最大时买入
    dea_sub_dif_new = dea-dif
    if dea_sub_dif_new &gt; 20 and (dea_sub_dif_new - dea_sub_dif_current) &lt; 0:
        macd_buy_flag = True # 交易标志位置1    
    else:
        macd_buy_flag = False
    dif_buy_current = dif  
    dea_sub_dif_current = dea_sub_dif_new #当前DEA-DIF记为历史
    return macd_buy_flag,dif_buy_current,dea_sub_dif_current

#MACD判断卖点
def macd_sell_flag_function(bar,dif_sub_dea_current,dif_buy_current):
    if len(bar) &lt; 100:		# 如果K线数组长度太小，就直接返回跳过
        return
    macd = TA.MACD(bar, 12, 26, 9)  		# 计算MACD值
    dif = macd[0][-2]  					# 获取DIF的值
    dea = macd[1][-2]  					# 获取DEA的值
    # macd卖出指标判断 dif-dea最大时卖出 
    dif_sub_dea_new = dif-dea
    # dif上升超过30 DIF-DEA达到波峰 关键调节点dif-dif_buy_current
    # if (dif-dif_buy_current)&gt;20 and dif_sub_dea_new &gt; 0 and (dif_sub_dea_new - dif_sub_dea_current) &lt; 0:

    if dif_sub_dea_new &gt; 20 and (dif_sub_dea_new - dif_sub_dea_current) &lt; 0:
        macd_sell_flag = True
    else:
        macd_sell_flag = False
    dif_sub_dea_current = dif_sub_dea_new#当前DIF-DEA记为历史
    return macd_sell_flag,dif_sub_dea_current
</code></pre>
<p><strong>未来研究方向：</strong></p>
<ol>
<li>不同K线级别MACD交易策略融合</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[量化交易——发明者平台常用API]]></title>
        <id>https://lienguang0624.github.io/post/liang-hua-jiao-yi-fa-ming-zhe-ping-tai-chang-yong-api/</id>
        <link href="https://lienguang0624.github.io/post/liang-hua-jiao-yi-fa-ming-zhe-ping-tai-chang-yong-api/">
        </link>
        <updated>2021-04-22T07:38:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基本策略框架">基本策略框架</h1>
<pre><code class="language-python">def onTick():
    Log(exchange.GetTicker())

def main():
    while True:
        onTick()
        Sleep(60000)
</code></pre>
<p><code>onTick()</code>函数中定义操作内容<br>
<code>Sleep()</code>函数控制访问交易所API接口的频率</p>
<h1 id="行情api">行情API</h1>
<h2 id="exchangegetticker-获取市场当前行情">exchange.GetTicker() 获取市场当前行情</h2>
<pre><code class="language-c">{
    Info    : {...},             // 请求交易所接口后，交易所接口应答的原始数据，回测时无此属性
    High    : 1000,              // 最高价
    Low     : 500,               // 最低价
    Sell    : 900,               // 卖一价
    Buy     : 899,               // 买一价
    Last    : 900,               // 最后成交价
    Volume  : 10000000,          // 最近成交量
    Time    : 1567736576000      // 毫秒级别时间戳
}
</code></pre>
<p>python下调用方式：</p>
<pre><code class="language-python">def main():
    ticker = exchange.GetTicker()
    Log(&quot;High:&quot;, ticker[&quot;High&quot;], &quot;Low:&quot;, ticker[&quot;Low&quot;], &quot;Sell:&quot;, ticker[&quot;Sell&quot;], &quot;Buy:&quot;, ticker[&quot;Buy&quot;], &quot;Last:&quot;, ticker[&quot;Last&quot;], &quot;Volume:&quot;, ticker[&quot;Volume&quot;])
</code></pre>
<h2 id="exchangegetrecords-获取历史行情">exchange.GetRecords() 获取历史行情</h2>
<pre><code class="language-c">{
    Time    : 1567736576000,     // 一个时间戳,精确到毫秒，与Javascript的new Date().getTime()得到的结果格式一样
    Open    : 1000,              // 开盘价
    High    : 1500,              // 最高价
    Low     : 900,               // 最低价
    Close   : 1200,              // 收盘价
    Volume  : 1000000            // 交易量
}
</code></pre>
<p>python下调用方式：</p>
<pre><code class="language-python">def main():
    Log(exchange.GetRecords(60 * 2))
    Log(exchange.GetRecords(PERIOD_M5))
</code></pre>
<p>参数值:<code>PERIOD_M1</code>指1分钟,<code>PERIOD_M5</code>指5分钟,<code>PERIOD_M15</code>指15分钟,<code>PERIOD_M30</code>指30分钟,<code>PERIOD_H1</code>指1小时,<code>PERIOD_D1</code>指一天,Period参数设置5，即为请求5秒为周期的K线数据。<br>
Record结构体内容：</p>
<pre><code class="language-python">def main():
    records = exchange.GetRecords(PERIOD_H1)
    Log(&quot;第一根k线数据为，Time:&quot;, records[0][&quot;Time&quot;], &quot;Open:&quot;, records[0][&quot;Open&quot;], &quot;High:&quot;, records[0][&quot;High&quot;])
    Log(&quot;第二根k线数据为，Time:&quot;, records[1][&quot;Time&quot;], &quot;Close:&quot;, records[1][&quot;Close&quot;])
    Log(&quot;当前K线（最新）&quot;, records[-1], &quot;上一根K线&quot;, records[-2])
</code></pre>
<h2 id="exchangegetaccount-获取账户信息">exchange.GetAccount() 获取账户信息</h2>
<pre><code class="language-c">{
    Info            : {...},     // 请求交易所接口后，交易所接口应答的原始数据，回测时无此属性
    Balance         : 1000,      // 余额(人民币或者美元,在Poloniex交易所里ETC_BTC这样的品种,Balance就指的是BTC的数量,Stocks指的是ETC数量)
    FrozenBalance   : 0,         // 冻结的余额
    Stocks          : 1,         // BTC/LTC数量,数字货币现货为当前可操作币的余额(去掉冻结的币),数字货币期货的话为合约当前可用保证金(传统期货无此属性)
    FrozenStocks    : 0          // 冻结的BTC/LTC数量(传统期货无此属性)
}
</code></pre>
<p>Account结构体:</p>
<pre><code class="language-python">def main():
    account = exchange.GetAccount()
    Log(&quot;账户信息，Balance&quot;, account[&quot;Balance&quot;], &quot;FrozenBalance:&quot;, account[&quot;FrozenBalance&quot;], &quot;Stocks:&quot;, 
        account[&quot;Stocks&quot;], &quot;FrozenStocks:&quot;, account[&quot;FrozenStocks&quot;])
</code></pre>
<h2 id="exchangegetposition-获取仓位信息">exchange.GetPosition() 获取仓位信息</h2>
<pre><code class="language-c">{
    Info            : {...},     // 请求交易所接口后，交易所接口应答的原始数据，回测时无此属性
    MarginLevel     : 10,        // 杆杠大小
    Amount          : 100,       // 持仓量，OKEX合约交易所，表示合约的份数(整数且大于1，即合约张数)
    FrozenAmount    : 0,         // 仓位冻结量
    Price           : 10000,     // 持仓均价
    Profit          : 0,         // 持仓浮动盈亏(数据货币单位：BTC/LTC,传统期货单位:RMB,股票不支持此字段,注:OKEX合约全仓情况下指实现盈余,并非持仓盈亏,逐仓下指持仓盈亏)
    Type            : 0,         // PD_LONG为多头仓位(CTP中用closebuy_today平仓),PD_SHORT为空头仓位(CTP用closesell_today)平仓,(CTP期货中)PD_LONG_YD为咋日多头仓位(用closebuy平),PD_SHORT_YD为咋日空头仓位(用closesell平)
    ContractType    : &quot;quarter&quot;, // 商品期货为合约代码,股票为'交易所代码_股票代码',具体参数SetContractType的传入类型
    Margin          : 1          // 仓位占用的保证金
}
</code></pre>
<p>Position结构体:</p>
<pre><code class="language-python">def main():
    exchange.SetContractType(&quot;this_week&quot;)
    exchange.SetMarginLevel(10)
    exchange.SetDirection(&quot;buy&quot;)
    exchange.Buy(10000, 2)
    position = exchange.GetPosition()
    if len(position) &gt; 0:
        Log(&quot;Amount:&quot;, position[0][&quot;Amount&quot;], &quot;FrozenAmount:&quot;, position[0][&quot;FrozenAmount&quot;], &quot;Price:&quot;, 
            position[0][&quot;Price&quot;], &quot;Profit:&quot;, position[0][&quot;Profit&quot;], &quot;Type:&quot;, position[0][&quot;Type&quot;], 
            &quot;ContractType:&quot;, position[0][&quot;ContractType&quot;])
</code></pre>
<h2 id="_cfunction-args-重试函数">_C(function, args...) 重试函数</h2>
<pre><code class="language-c">exchange.GetTicker()
exchange.GetDepth()
exchange.GetTrades()
exchange.GetRecords()
exchange.GetAccount()
exchange.GetOrders()
exchange.GetOrder()
exchange.GetPosition()
</code></pre>
<p>以上函数都通过_C(...)来调用，以防出错</p>
<h1 id="日志api">日志API</h1>
<h2 id="log-日志信息">Log(...) 日志信息</h2>
<pre><code class="language-python">def main():
    Log(&quot;发明者量化你好 !@&quot;)
    Sleep(1000 * 5)
    Log(&quot;微信你好, #ff0000@&quot;)
</code></pre>
<h2 id="logprofitprofit-记录收益">LogProfit(Profit) 记录收益</h2>
<p>可以以字符&amp;结尾，实现只绘制收益图表，不打印收益日志：<code>LogProfit(10, '&amp;')</code></p>
<h1 id="交易apu">交易APU</h1>
<h2 id="exchangebuyprice-amount-买入">exchange.Buy(Price, Amount) 买入</h2>
<p>购买市价单</p>
<pre><code class="language-python">def main():
    exchange.Buy(-1, 0.1)
</code></pre>
<h2 id="exchangesellprice-amount-卖出">exchange.Sell(Price, Amount) 卖出</h2>
<p>卖出市价单</p>
<pre><code class="language-python">def main():
    id = exchange.Sell(-1, 1)
    Log(&quot;id:&quot;, id)
</code></pre>
<h1 id="期货交易">期货交易</h1>
<h2 id="exchangesetprecisionpriceprecision-amountprecision-设置买卖精度">exchange.SetPrecision(PricePrecision, AmountPrecision) 设置买卖精度</h2>
<p>设置价格与品种下单量的小数位精度,设置后会自动截断，参数值：PricePrecision为number类型，用来控制价格后面的小数点位，AmountPrecision为number类型，用来控制数量后面的小数点位</p>
<pre><code class="language-python">def main():
    exchange.SetPrecision(2, 3)
</code></pre>
<p>注意：回测不支持该函数，回测的数值精度会自动处理。</p>
<h2 id="exchangesetmarginlevelmarginlevel-设置杆杠大小-参数值number-类型">exchange.SetMarginLevel(MarginLevel) 设置杆杠大小。参数值：number 类型</h2>
<pre><code class="language-python">def main():
    exchange.SetMarginLevel(10)
</code></pre>
<h2 id="exchangesetdirectiondirection-设置buy或者sell下单类型-参数值string类型">exchange.SetDirection(Direction) 设置Buy或者Sell下单类型。参数值：string类型</h2>
<pre><code class="language-python">def main():
    // 举例设置为OKEX期货当周合约
    exchange.SetContractType(&quot;this_week&quot;)    
    // 设置杠杆为5倍
    exchange.SetMarginLevel(5)
    // 设置下单类型为做多
    exchange.SetDirection(&quot;buy&quot;)
    // 以10000的价格，合约数量为2张下单
    exchange.Buy(10000, 2)              
    exchange.SetMarginLevel(5)
    exchange.SetDirection(&quot;closebuy&quot;)
    exchange.Sell(1000, 2)
</code></pre>
<h1 id="exchangesetcontracttypecontracttype设置合约类型">exchange.SetContractType(ContractType)，设置合约类型</h1>
<pre><code class="language-python">def main():
    exchange.SetContractType(&quot;this_week&quot;)
</code></pre>
<p>有<code>this_week</code>,<code>next_week</code>,<code>quarter</code>三个参数，永续合约为：<code>swap</code>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown用法简介]]></title>
        <id>https://lienguang0624.github.io/post/markdown/</id>
        <link href="https://lienguang0624.github.io/post/markdown/">
        </link>
        <updated>2021-04-22T06:35:05.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://lienguang0624.github.io//post-images/1619074934307.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://lienguang0624.github.io//post-images/1619074942951.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://lienguang0624.github.io//post-images/1619074947111.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://lienguang0624.github.io//post-images/1619074951564.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://lienguang0624.github.io//post-images/1619074955112.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://lienguang0624.github.io//post-images/1619074958798.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>